<?php
defined('BASEPATH') OR exit('No direct script access allowed');

class Log extends CI_Controller {

	public function __construct() {
		parent::__construct();
		$this->load->helper('permission_helper');

	}

	public function index() {

	}

	private function getLines($file) {
    $file = new \SplFileObject($file, 'r');
    $file->setFlags(SplFileObject::READ_AHEAD | SplFileObject::SKIP_EMPTY |
		SplFileObject::DROP_NEW_LINE);
    $file->seek(PHP_INT_MAX);

    return $file->key();
	}

	private function getLastLines($logfile, $from, $to) {
		$file = new SplFileObject($logfile, 'r');
		$file->seek(PHP_INT_MAX);
		$last_line = $file->key();
		error_log("Lines ". $last_line);
		$lines = new LimitIterator($file, $from, $to);
		return $lines;
	}

	public function download() {
		if(isset($_GET["file"])) {
			if($_GET["file"]=="nib") {
				$file_path = '/var/log/nib.log';
			}	elseif ($_GET["file"]=="pppoe") {
				$file_path = '/var/log/pppoe.log';
			}

			if (file_exists($file_path)) {
					header('Content-Description: File Transfer');
					header('Content-Type: application/octet-stream');
					header('Content-Disposition: attachment; filename="'.basename($file_path).'"');
					header('Expires: 0');
					header('Cache-Control: must-revalidate');
					header('Pragma: public');
					header('Content-Length: ' . filesize($file_path));
					readfile($file_path);
					exit;
			}	else {
				error_log("File dont exists");
			}
		}

	}

	public function nib_log() {
		$logfile = '/var/log/nib.log';
		$this->tail_log($logfile);
	}

	public function pppoe_log() {
  	$logfile = '/var/log/pppoe.log';
		$this->tail_log($logfile);
  }

  public function tail_log($logfile) {
		$num = (isset($_GET['num'])) ? $_GET['num'] : 0;

		if (!$num) {
			$file_len = $this->getLines($logfile);
			$logfile_lines = $this->getLastLines($logfile, ($file_len - 10), $file_len);
			$logfile_lines_arr = array();
			foreach ($logfile_lines as $line) {
				if(strlen($line) > 0 && $line != '\n') {
					array_push($logfile_lines_arr, $line);
				}
			}
	    $ret_arr = array('status'=>'updated', 'count'=>$file_len,'loglines'=>$logfile_lines_arr);

	    echo json_encode($ret_arr);
		} else {
				error_log("log line num ". $num);
				$upto = $file_len = $this->getLines($logfile);

				if($file_len == $num) {
					error_log("No changes");
					$logfile_lines_arr = array();
		      $ret_arr = array('status'=>'freeze', 'count'=>$file_len,'loglines'=>$logfile_lines_arr);
					sleep(1);
		      echo json_encode($ret_arr);
				} else {
					$diff = $file_len - $num;

					if($diff > 10) {
						error_log("More than 10 lines changes");
						// this is for more than 10 lines has been generated.
						$upto = $num + 11;
						$logfile_lines = $this->getLastLines($logfile, ($num + 1), $upto);
					} else if ($diff > 0 && $diff < 10) {
						error_log("less than 10 lines changes");
						// this is for less than 10 file has been generated.
						$logfile_lines = $this->getLastLines($logfile, ($file_len - $diff), $file_len);
					} else if ($diff < 0) {
						error_log("New log file generated.");

						// this is for new file has been generated by logger
						if($file_len > 10)
							$logfile_lines = $this->getLastLines($logfile, ($file_len - 10), $upto);
						else
							$logfile_lines = $this->getLastLines($logfile, 0, $upto);
					}

					$logfile_lines_arr = array();
					foreach ($logfile_lines as $line) {
						if(strlen($line) > 0 && $line != '\n') {
							array_push($logfile_lines_arr, $line);
						}
					}
					$ret_arr = array('status'=>'updated', 'count'=>$upto, 'loglines'=>$logfile_lines_arr);

					echo json_encode($ret_arr);

				}

    } // end else
  }

	public function pppoe()	{
		$data['page_heading'] = "PPPoE Log";
		$this->load->view('pppoe_log', $data);
	}

	public function nib()	{
		$data['page_heading'] = "NIB Log";
		$this->load->view('nib_log', $data);
	}
}
